Notes : Backend - 1

What is Node.js ?
 -- not a language,library or framework.
 -- Javascript Runtime Environment.
 -- It is used for server side Programming.

After Installing node.js we can use "node" command to start the runtime Environment.
we can use .help command to know more about the commands.

How to Run JS files in node ?
    -- Make sure you are in teh correct directory
    -- lets say the name is script.js 
    -- to run it we will use the command "node script.js"


Process 
    process - This object provides information about, and control over, the current Node.js process.
    process.argv - returns an array containing the command-line arguments passed when the node.js process was launched. Ex - node script.js hello bye


module.exports is used to export data from one file to another. it can be a string, Number, function, variable anything;
we use the require() function  to accept the incoming information.
if we use the require() function  without actually exporting anything .. we will get an empty object.


Now we will learn how can we transfer whole directories information as objects to a file in some other directory.
    -- first after all the files with has been created, we have to create an index.js(the naming convention matters here) file in the same directory where all the data is stored and then require every data over there.

    -- now we can directly use the Folder name or directory name to access the data that we are exporting from the index.js file in that folder.

What is NPM ?
    -- it is a library of packages
    -- npm is the standard package manager for Node.js
    -- command line tool to access it 
    -- comes pre-installed with Node

How to install Packages ?
    -- use command - npm install <- package name -> Eg - npm i react
    -- when we install library using npm we get three things  
    -- Node Modules refers to a directory that contains all the external libraries and packages (also known as modules) that your Node.js project depends on.
    -- package.json is a JSON (JavaScript Object Notation) file that contains metadata about a Node.js project, such as its name, version, description, entry point, scripts, and most importantly, its dependencies. Developers use this file to specify the project's dependencies, scripts to run various tasks, and other configuration settings.
    -- package-lock.json is another JSON file generated by npm or yarn, which provides more detailed information about the project's dependencies. It includes the specific versions of each package installed, along with their direct and transitive dependencies. This file ensures that every developer working on the project uses the exact same versions of the packages, eliminating any potential inconsistencies between different development environments.

We can create our own package.json while creating a new project by using npm init command and go through the onscreen instructions, then as soon as we install any library, the dependency gets added to the package.json file that we created.


There is another way to get data from different files which is considered to be better because its efficient and asynchronous in nature. 
this method is called import and export.
we can add export before the things that we want to export and then in the other file we can just use the import keyword to select what we want to import and directly import that
BUT WE MUST HAVE A package.json file to use the import export method and we have to add a key value pair of "type" : "module" AND THIS IS A MUST. SO WE WILL USE npm init command to get the package.json file and then manually type in the key value pair.

the basic difference between require and import is that we can't selectively load only the peices we need with require but with import, we can selectively load the pieces we need, which can save memory

Loading is synchronous for require and asynchronous for import




 
